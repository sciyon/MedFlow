generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Clinic {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  time_start    String
  time_end      String
  address       String    @db.VarChar(255)
  email         String    @unique @db.VarChar(100)
  phone_number  String    @db.VarChar(15)
  max_capacity  Int
}

model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique @db.VarChar(100)
  password      String           @db.VarChar(255)
  status        Boolean          @default(true)
  role          Role             @default(PATIENT)
  date_created  DateTime         @default(now())
  
  user_data     Userdata? 
  as_patient    Prescription[]   @relation("PatientPrescriptions")
  as_doctor     Prescription[]   @relation("DoctorPrescriptions")
  insurances    Insurance[]
  appointments  Appointment[]
}


model Userdata {
  id            Int       @id @default(autoincrement()) 
  first_name    String    @db.VarChar(50)
  middle_name   String?   @db.VarChar(50)
  last_name     String    @db.VarChar(50)
  birth_date    DateTime  
  sex           Gender    
  address       String    @db.VarChar(255)
  mobile        String    @db.VarChar(15)
  landline      String?   @db.VarChar(15)
  date_created  DateTime  @default(now())
  date_modified DateTime  @updatedAt

  user          User      @relation(fields: [user_id], references: [id]) 
  user_id       Int       @unique   
}

model Appointment {
  id                Int       @id @default(autoincrement()) 
  title             String    @db.VarChar(100)
  description       String
  images            String?   @db.Text
  date_created      DateTime  @default(now())
  date_appointment  DateTime
  date_modified     DateTime  @updatedAt
  status            Appointment_Status @default(PENDING)
  
  patient           User      @relation(fields: [patient_id], references: [id])
  patient_id        Int
}
model NoUserAppointment {
  id                Int       @id @default(autoincrement()) 
  title             String    @db.VarChar(100)
  description       String
  images            String?   @db.Text
  date_created      DateTime  @default(now())
  date_appointment  DateTime
  date_modified     DateTime  @updatedAt
  phone_number      String
  email_address     String?
  
  status            Appointment_Status @default(PENDING)
}

model Insurance {
  id             Int       @id @default(autoincrement())
  provider       String    @db.VarChar(100)
  policy_number  String    @db.VarChar(50)
  date_created   DateTime  @default(now())
  
  patient        User      @relation(fields: [patient_id], references: [id])
  patient_id     Int
}

model Prescription {
  id             Int       @id @default(autoincrement())
  date_created   DateTime  @default(now())
  notes          String    @db.Text
  
  patient_id     Int
  doctor_id      Int
  patient        User      @relation("PatientPrescriptions", fields: [patient_id], references: [id])
  doctor         User      @relation("DoctorPrescriptions", fields: [doctor_id], references: [id])
  prescription_data PrescriptionData[]
}

model PrescriptionData{
  id             Int       @id @default(autoincrement())
  notes          String    
  medicine_name  String    
  days_to_take   Int    
  drug_quantity  Int   
  dosage         String    
  date_created   DateTime  @default(now())
  
  prescription   Prescription      @relation(fields: [prescription_id], references: [id])
  prescription_id      Int
}

enum Role {
  PATIENT
  DOCTOR
  ASSISTANT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Appointment_Status {
  PENDING
  APPROVED
  DENIED
}